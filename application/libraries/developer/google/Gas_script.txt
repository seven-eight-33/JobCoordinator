function mail_management() {
  //MailApp.sendEmail('reon1022@gmail.com', 'テスト', 'テスト本文');

  var start = 0;
  var count = 0;
  var max = 500;
  var mailList = "";

  // 未読の受信メールを取得
  var threads = GmailApp.search("has:nouserlabels is:unread", start, max);
//  var threads = GmailApp.search("has:nouserlabels is:read", start, max);
  // スレッド取得件数
  var thread_count = threads.length;
  // スレッドからメールを取得する→二次元配列で格納
  var myMsgs = GmailApp.getMessagesForThreads(threads);
  // メッセージ取得件数
  var msg_count = myMsgs.length;
  var payload = [];

  // 未読メールのみを処理対象とする
  if(msg_count > 0){
    var valMsgs = [];
    for(var i = 0;i < msg_count;i++){

      // 各種該当メール情報を取得
      var valMsgPart = [];
      var in_msg_cnt = myMsgs[i][0].getThread().getMessageCount();
      for(var j = 0; j < in_msg_cnt; j++){
        valMsgPart[j] = [];
        valMsgPart[j] =
        {
          "id":myMsgs[i][j].getId(),
          "date":myMsgs[i][j].getDate(),
          "to":myMsgs[i][j].getTo(),
          "cc":myMsgs[i][j].getCc(),
          "replyto":myMsgs[i][j].getReplyTo(),
          "from":myMsgs[i][j].getFrom(),
          "subject":myMsgs[i][j].getSubject(),
          "plainbody":myMsgs[i][j].getPlainBody(),
          "all_data":myMsgs[i][j].getRawContent()
        }

        // 処理済みのメールを既読にする
        myMsgs[i][j].markRead();
      }

      // 各種該当メール情報を取得
      valMsgs[i] = [];
      valMsgs[i] =
        {
          "msgcount":in_msg_cnt,
          "msgdata":valMsgPart
        }

    }

//    Logger.log( valMsgs[0]["msgdata"][3]["all_data"] );

    // 取得したメール情報をPOST
    payload =
    {
      "count"     : msg_count,
      "mail_info" : JSON.stringify(valMsgs)
    };

    var options =
        {
          "method"  : "post",
          "payload" : payload
        };

//    var response = UrlFetchApp.fetch( 'http://h-matsuya.sakura.ne.jp/JobCoordinator/mail/mail_scheduler.php', options);
  }


  Logger.log( response );
}
